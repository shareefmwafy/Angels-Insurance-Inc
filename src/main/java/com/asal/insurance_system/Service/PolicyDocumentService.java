package com.asal.insurance_system.Service;


import com.asal.insurance_system.Model.Customer;
import com.asal.insurance_system.Model.Policy;
import com.asal.insurance_system.Model.User;
import com.asal.insurance_system.Repository.PolicyRepository;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import com.itextpdf.layout.element.Table;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Optional;

@Service
public class PolicyDocumentService {
    private final PolicyRepository policyRepository;

    @Autowired
    private AuditLogService logService;

    public PolicyDocumentService(PolicyRepository policyRepository) {
        this.policyRepository = policyRepository;
    }

    public byte[] generatePolicyDocument(Integer policyId, User userDetails) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(outputStream);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        document.add(new Paragraph("Insurance Policy Document")
                .setBold()
                .setFontSize(18)
                .setTextAlignment(TextAlignment.CENTER)
                .setMarginBottom(20));
        Optional<Policy> policy = policyRepository.findById(policyId);

        Customer customer = policy.get().getCustomer();
        document.add(new Paragraph("Customer Information").setBold().setFontSize(14));
        Table customerTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                .setWidth(UnitValue.createPercentValue(100));

        customerTable.addCell("Customer ID:");
        customerTable.addCell(String.valueOf(customer.getId()));
        customerTable.addCell("Full Name:");
        customerTable.addCell(customer.getFirstName() + " " + customer.getSecondName() + " " + customer.getThirdName() + " " + customer.getLastName());
        customerTable.addCell("Phone Number:");
        customerTable.addCell(customer.getPhoneNumber());
        customerTable.addCell("Email:");
        customerTable.addCell(customer.getEmail());
        customerTable.addCell("Address:");
        customerTable.addCell(customer.getStreet() + ", " + customer.getCity() + ", " + customer.getCountry());
        document.add(customerTable);

        document.add(new Paragraph("\n"));

        document.add(new Paragraph("Policy Details").setBold().setFontSize(14));
        Table policyTable = new Table(UnitValue.createPercentArray(new float[]{1, 2}))
                .setWidth(UnitValue.createPercentValue(100));

        policyTable.addCell("Policy ID:");
        policyTable.addCell(String.valueOf(policy.get().getPolicyId()));
        policyTable.addCell("Type:");
        policyTable.addCell(policy.get().getPolicyType().name());
        policyTable.addCell("Status:");
        policyTable.addCell(policy.get().getPolicyStatus().name());
        policyTable.addCell("Amount:");
        policyTable.addCell(String.valueOf(policy.get().getAmount()));
        policyTable.addCell("Start Date:");
        policyTable.addCell(policy.get().getStartDate().toString());
        policyTable.addCell("End Date:");
        policyTable.addCell(policy.get().getEndDate().toString());

        document.add(policyTable);

        document.add(new Paragraph("\n"));
        document.add(new Paragraph("Generated By:"))
                        .setBold()
                        .setFontSize(14);
        document.add(new Paragraph(userDetails.getFirstName() + " " + userDetails.getLastName()))
                        .setFontSize(12);

        document.close();

        logService.logAction(
                "Generate Policy Document",
                " ",
                null,
                "",
                "",
                userDetails.getId(),
                userDetails.getRole().name()
        );


        return outputStream.toByteArray();

    }

}
